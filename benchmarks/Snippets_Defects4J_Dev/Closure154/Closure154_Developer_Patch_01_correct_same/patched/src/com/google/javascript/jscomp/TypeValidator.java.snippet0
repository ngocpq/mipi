/**
   * Expect that the peroperty in an interface that this type implements is
   * implemented and correctly typed.
   */
  private void expectInterfaceProperty(NodeTraversal t, Node n,
      ObjectType instance, ObjectType implementedInterface, String prop) {
    if (!instance.hasProperty(prop)) {
      // Not implemented
      String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);
      sourceName = sourceName == null ? "" : sourceName;
      if (shouldReport) {
        compiler.report(JSError.make(sourceName, n,
            INTERFACE_METHOD_NOT_IMPLEMENTED,
            prop, implementedInterface.toString(), instance.toString()));
      }
      registerMismatch(instance, implementedInterface);
    } else {
      JSType found = instance.getPropertyType(prop);
      JSType required
        = implementedInterface.getImplicitPrototype().getPropertyType(prop);
      found = found.restrictByNotNullOrUndefined();
      required = required.restrictByNotNullOrUndefined();
      if (!found.canAssignTo(required)) {
        // Implemented, but not correctly typed
        if (shouldReport) {
          FunctionType constructor
            = implementedInterface.toObjectType().getConstructor();
          compiler.report(t.makeError(n,
              HIDDEN_INTERFACE_PROPERTY_MISMATCH, prop,
              constructor.getTopMostDefiningType(prop).toString(),
              required.toString(), found.toString()));
        }
        registerMismatch(found, required);
      }
    }
  }